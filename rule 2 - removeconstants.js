function contarTripulantes(tripulacao) {
    // Zoro conta os tripulantes uma vez
    for (let i = 0; i < tripulacao.length; i++) {
      console.log(`Tripulante ${i + 1}: ${tripulacao[i]}`);
    }
    
    // Zoro conta os tripulantes de novo
    for (let i = 0; i < tripulacao.length; i++) {
      console.log(`(ConfirmaÃ§Ã£o) Tripulante ${i + 1}: ${tripulacao[i]}`);
    }
}

  
// O fato de Zoro contar os tripulantes duas vezes faz com que a complexidade pareÃ§a O(2n).

// Mas em notaÃ§Ã£o Big O, constantes nÃ£o importam porque estamos interessados apenas no crescimento da funÃ§Ã£o quando n fica muito grande.

// EntÃ£o, na prÃ¡tica:
// ðŸ”¹ O(2n) = O(n)
// ðŸ”¹ O(100n) = O(n)
// ðŸ”¹ O(1000n) = O(n)

// ðŸ“Œ Por que remover o 2?
// Quando n cresce muito (ex: n = 1.000.000), a diferenÃ§a entre n e 2n nÃ£o muda significativamente a escala do problema.

// Por isso, no Big O, apenas focamos na ordem de crescimento e removemos constantes fixas como 2, 100, etc. ðŸš€